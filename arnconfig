package com.example.demo.config;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicSessionCredentials;
import com.amazonaws.auth.ClasspathPropertiesFileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClient;
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest;
import com.amazonaws.services.securitytoken.model.AssumeRoleResult;

@Configuration
public class S3Config {
	
	 @Value("${gkz.aws.access_key_id}")
	  private String awsId;
	 
	  @Value("${gkz.aws.secret_access_key}")
	  private String awsKey;
	  
	  @Value("${gkz.s3.region}")
	  private String region;
	  
	  @Value("${role.arn}")
	  private String arn;
	 
	  @Bean
	  public AmazonS3 s3client() throws IOException {
		  

		 
		   
		  AWSCredentialsProvider provider = new ClasspathPropertiesFileCredentialsProvider();

		   AWSSecurityTokenServiceClient stsClientNew = new 
		            AWSSecurityTokenServiceClient(provider);
		   AssumeRoleRequest assumeRequest = new AssumeRoleRequest()
		            .withRoleArn(arn)
		            .withRoleSessionName("phantom");
		   AssumeRoleResult assumeResult = 
				   stsClientNew.assumeRole(assumeRequest);
		   BasicSessionCredentials temporaryCredentials =
			        new BasicSessionCredentials(
			                    assumeResult.getCredentials().getAccessKeyId(),
			                    assumeResult.getCredentials().getSecretAccessKey(),
			                    assumeResult.getCredentials().getSessionToken());
		   AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
		              .withCredentials(new AWSStaticCredentialsProvider(temporaryCredentials))
		              .withRegion(region)
		              .build();

		   
		  
	    
	   /* BasicAWSCredentials awsCreds = new BasicAWSCredentials(awsId, awsKey);
	    AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
	                .withRegion(Regions.fromName(region))
	                            .withCredentials(new AWSStaticCredentialsProvider(awsCreds))
	                            .build();*/
	    
	    return s3Client;
	  }
	  
	

       

        

          // Start a session.
       
          // The duration can be set to more than 3600 seconds only if temporary
          // credentials are requested by an IAM user rather than an account owner.
          
        

          // Package the temporary security credentials as a BasicSessionCredentials object 
          // for an Amazon S3 client object to use.
         

          // Provide temporary security credentials so that the Amazon S3 client 
          // can send authenticated requests to Amazon S3. You create the client
          // using the basicSessionCredentials object.
         
}
